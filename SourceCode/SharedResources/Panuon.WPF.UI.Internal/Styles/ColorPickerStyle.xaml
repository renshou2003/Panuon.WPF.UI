<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Panuon.WPF.UI"
                    xmlns:pw="https://opensource.panuon.com/wpf"
                    xmlns:i="clr-namespace:Panuon.WPF.UI.Internal"
                    xmlns:rs="clr-namespace:Panuon.WPF.UI.Resources"
                    xmlns:irs="clr-namespace:Panuon.WPF.UI.Internal.Resources">
    <ResourceDictionary.MergedDictionaries>
        <pw:SharedResourceDictionary Source="pack://application:,,,/Panuon.WPF.UI;component/Styles/ButtonStyle.xaml" />
        <pw:SharedResourceDictionary Source="pack://application:,,,/Panuon.WPF.UI;component/Templates/ColorPickerTemplate.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=ClearButtonStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}"
           TargetType="Button"
           BasedOn="{StaticResource {x:Static rs:StyleKeys.ButtonStyle}}">
        <Setter Property="local:ButtonHelper.HoverForeground"
                Value="{Binding Foreground, Converter={x:Static pw:Converters.LightenSolidColorBrushConverter}, ConverterParameter=0.6, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="local:ButtonHelper.HoverBackground"
                Value="{x:Null}" />
        <Setter Property="local:ButtonHelper.ClickBackground"
                Value="{x:Null}" />
        <Setter Property="FontFamily"
                Value="/Panuon.WPF.UI;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="FontSize"
                Value="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
        <Setter Property="Margin"
                Value="0,0,5,0" />
        <Setter Property="Content"
                Value="&#xe92d;" />
        <Setter Property="Foreground"
                Value="{Binding Path=(i:VisualStateHelper.Foreground), RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
    </Style>

    <DataTemplate x:Key="{ComponentResourceKey ResourceId=PreviewTemplateKey, TypeInTargetAssembly={x:Type local:ColorPicker}}">
        <Border Background="{Binding}"
                BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType=local:ColorPicker}, Mode=OneWay}"
                BorderThickness="1"
                Margin="5"
                Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
    </DataTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=ToggleArrowTransformControlStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}"
           TargetType="local:TransformControl">
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="FontFamily"
                Value="/Panuon.WPF.UI;component/Resources/Fonts/#PanuonIcon" />
        <Setter Property="FontSize"
                Value="{Binding Path=(local:IconHelper.ToggleArrowFontSize), RelativeSource={RelativeSource AncestorType=local:ColorPicker}, Mode=OneWay}" />
        <Setter Property="Content"
                Value="&#xe903;" />
        <Setter Property="Padding"
                Value="4,0,8,0" />
        <Setter Property="AnimationDuration"
                Value="0:0:0.15" />
        <Setter Property="Foreground"
                Value="{Binding Path=(i:VisualStateHelper.Foreground), RelativeSource={RelativeSource AncestorType=local:ColorPicker}, Mode=OneWay}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton}, Mode=OneWay}"
                         Value="True">
                <Setter Property="ScaleY"
                        Value="-1" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=ColorSelectorStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}"
           TargetType="local:ColorSelector">
        <Setter Property="Width"
                Value="NaN" />
        <Setter Property="Height"
                Value="NaN" />
        <Setter Property="BorderThickness"
                Value="0" />
    </Style>

    <Style x:Key="{x:Static rs:StyleKeys.ColorPickerStyle}"
           TargetType="local:ColorPicker">
        <Setter Property="i:VisualStateHelper.Regist"
                Value="True" />
        <Setter Property="i:VisualStateHelper.IsHover"
                Value="{Binding IsMouseOver, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="i:VisualStateHelper.IsFocused"
                Value="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:IconHelper.FontFamily"
                Value="{Binding IconFontFamily, Source={x:Static local:GlobalSettings.Setting}}" />
        <Setter Property="local:IconHelper.FontSize"
                Value="{Binding IconFontSize, Source={x:Static local:GlobalSettings.Setting}}" />
        <Setter Property="local:IconHelper.ToggleArrowFontSize"
                Value="{Binding FontSize, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:IconHelper.Foreground"
                Value="{Binding Path=(i:VisualStateHelper.Foreground), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:IconHelper.Margin"
                Value="10,0,0,0" />
        <Setter Property="local:IconHelper.VerticalAlignment"
                Value="Center" />
        <Setter Property="local:IconHelper.HorizontalAlignment"
                Value="Left" />
        <Setter Property="FocusVisualStyle"
                Value="{Binding FocusVisualStyle, Source={x:Static local:GlobalSettings.Setting}}" />
        <Setter Property="local:DropDownHelper.CornerRadius"
                Value="{Binding CornerRadius, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:DropDownHelper.Background"
                Value="{Binding Path=(i:VisualStateHelper.Background), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:DropDownHelper.BorderBrush"
                Value="{Binding Path=(i:VisualStateHelper.BorderBrush), RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:DropDownHelper.BorderThickness"
                Value="{Binding BorderThickness, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:DropDownHelper.Width"
                Value="350" />
        <Setter Property="local:DropDownHelper.Height"
                Value="300" />
        <Setter Property="local:DropDownHelper.Placement"
                Value="BottomRight" />
        <Setter Property="WatermarkForeground"
                Value="{Binding Path=(i:VisualStateHelper.Foreground), Converter={x:Static irs:Converters.BrushOpacityConverter}, ConverterParameter=0.8, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
        <Setter Property="local:DropDownHelper.ShadowColor"
                Value="#EAEAEA" />
        <Setter Property="PreviewTemplate"
                Value="{StaticResource {ComponentResourceKey ResourceId=PreviewTemplateKey, TypeInTargetAssembly={x:Type local:ColorPicker}}}" />
        <Setter Property="ColorSelectorStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ColorSelectorStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}}" />
        <Setter Property="ToggleArrowTransformControlStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ToggleArrowTransformControlStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}}" />
        <Setter Property="ClearButtonStyle"
                Value="{StaticResource {ComponentResourceKey ResourceId=ClearButtonStyleKey, TypeInTargetAssembly={x:Type local:ColorPicker}}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Background"
                Value="White" />
        <Setter Property="BorderBrush"
                Value="Gray" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="DefaultColor"
                Value="{Binding SelectedColor, RelativeSource={RelativeSource Self}, Mode=OneTime}" />
        <Setter Property="Padding"
                Value="0,0" />
        <Setter Property="Template"
                Value="{StaticResource {x:Static irs:TemplateKeys.ColorPickerTemplate}}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Opacity"
                        Value="{Binding DisabledOpacity, Source={x:Static local:GlobalSettings.Setting}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedBorderBrush, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverBorderBrushLock"
                        Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedBorderThickness, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverBorderThicknessLock"
                        Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedCornerRadius, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverCornerRadiusLock"
                        Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedBackground, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverBackgroundLock"
                        Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedForeground, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverForegroundLock"
                        Value="True" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                    <Condition Binding="{Binding FocusedShadowColor, Converter={x:Static pw:Converters.IsNonnullConverter}, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                               Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="i:VisualStateHelper.HoverShadowColorLock"
                        Value="True" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
